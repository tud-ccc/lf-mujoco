target Cpp{
    cmake-include: "mujoco.cmake",
    };

import XArm7Controll from "../src/hardware/xarm7_controller.lf";
//import MujocoSimulator from "../src/simulator/mujoco_simulator.lf";
import XArm7InterfaceSimulated from "../src/interface/XArm7.lf";


public preamble {=
#include <chrono>
=}

reactor RobotControl (stride: int  = 10, hypotenuse: int = 50)  {
    private preamble{= 
    #include <cmath>

    double calculate_x_value(int hypothenus, int angle_in_deg){
        double x_val = 0.0;
        x_val = hypothenus * cos(angle_in_deg*3.14159/180.0);
        return x_val;
        
    }

    double calculate_y_value(int hypothenus, int angle_in_deg){
        double y_val = 0.0;
        y_val = hypothenus * sin(angle_in_deg*3.14159/180.0);
        return y_val;   }
    
    =}
    state deg: int = 0;
    output[6] signals: double;
    input world_data: WorldData;
    
    timer t(2s, 50 msec);

    state direction: bool;
    //logical action change_direction: void;

    reaction (startup) {=
        direction = false;
        srand(time(nullptr));
    =}

   
    reaction (t) -> signals {=
        std::cout << "We got a reaction" << std::endl;
        std::cout << "current degree value:  "<< deg << std::endl;

        //offset in order to change the middel point of the circle
        double _x_val = calculate_x_value(hypotenuse, deg ) + 400.0;
        double _y_val = calculate_y_value(hypotenuse, deg ) + 0.0;
        std::cout << "new x value:  "<< _x_val << std::endl;
        std::cout << "new y value:  "<< _y_val << std::endl;
        
        double _z_val = 200.0;
                    
        signals[0].set(_x_val);
        signals[1].set(_y_val);
        signals[2].set(_z_val);
        signals[3].set(180);
        

        deg = (deg + stride) % 360;

        //signals[3].set(direction ? 0.5 : -0.5);
        //signals[0].set(direction ? 0.5 : -0.5);
    =}

}

main reactor XArm7{
    controller = new RobotControl();
    backend = new XArm7Controll();
    //sim = new MujocoSimulator(file="./examples/models/xarm7/xarm7.xml");
    interface = new XArm7InterfaceSimulated();
    
    // connecting the simulator to the interface
    // This are all physical connections
    interface.simulator_signals -> backend.controll_signals;
    backend.world_data -> interface.simulator_world_data;
   
    // connecting the controller to the interface
    controller.signals -> interface.controller_signals;
    interface.controller_world_data -> controller.world_data;
}
