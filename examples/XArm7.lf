target Cpp{
    cmake-include: "mujoco.cmake",
    fast: true
};

import MujocoSimulator from "../src/mujoco_simulator.lf";
import XArm7InterfaceSimulated from "../interfaces/XArm7.lf";

public preamble {=
#include <chrono>
=}

reactor TestController {
    output[7] signals: double;
    input world_data: mjData*;
    
    timer t(0s, 33ms);

    state direction: bool;
    logical action change_direction: void;

    reaction (startup) {=
        direction = false;
        srand(time(nullptr));
    =}

    reaction (change_direction) {=
        std::cout << "CHANGE DIRECTION" << std::endl;
        direction = !direction;
    =}

    reaction (t) -> signals, change_direction {=
        std::cout << "SIM" << std::endl;
        if (rand() % 100 == 0) {
            change_direction.schedule(std::chrono::milliseconds((rand() % 5) * 5000));
        }

        signals[0].set(direction ? -1.0 : 1.0);
        signals[1].set(0.0);
    =}

}

main reactor XArm7{
    controller = new TestController();
    sim = new MujocoSimulator(file="./examples/models/xarm7_motor/xarm7.xml");
    interface = new XArm7InterfaceSimulated();
    
    // connecting the simulator to the interface
    // This are all physical connections
    interface.simulator_signals ~> sim.controll_signals;
    sim.simulator_world_data ~> interface.simulator_world_data;
   
    // connecting the controller to the interface
    controller.signals -> interface.controller_signals;
    interface.controller_world_data -> controller.world_data;
}
