target Cpp{
    cmake-include: "mujoco.cmake",
    fast: true
};

import MujocoSimulator from "../src/mujoco_simulator.lf";
import InversePendulumInterfaceSimulated from "../interfaces/InversePendulum.lf"

public preamble {=
#include <chrono>
=}

reactor TestController {
    output[1] signals: double;
    input world_data: WorldData;
    
    state controll_vector: mjtNum;
    state position_history: mjtNum;
    state last_update: mjtNum;

    timer t(0s, 33ms);

    reaction (startup) {=
        position_history = 0;
        last_update = 0.0;
    =}

    reaction (world_data) -> signals {=
        auto simulation = *world_data.get();

        const mjtNum sensor_factor = 10;
        const mjtNum p_controller_value = 3.5;

        std::cout << "T = " << simulation.time() << std::endl;
        auto sensor_data = simulation.sensor_data();

        if (last_update == 0.0){
            last_update = simulation.time();
            return;
        }
        
        mjtNum velolcity_vector = (sensor_data[0] - position_history)/(simulation.time() - last_update);
        controll_vector = p_controller_value * (-velolcity_vector - sensor_factor * sensor_data[0]);

        std::cout << "correction = " << controll_vector << std::endl;

        last_update = simulation.time();
        position_history = sensor_data[0];
        signals[0].set(controll_vector);
    =}
}

main reactor InversePendulum {
    controller = new TestController();
    sim = new MujocoSimulator(file="examples/models/inverse_pendulum.xml");
    interface = new InversePendulumInterfaceSimulated();
    
    // connecting the simulator to the interface
    // This are all physical connections
    interface.simulator_signals -> sim.controll_signals;
    sim.simulator_world_data -> interface.simulator_world_data;
   
    // connecting the controller to the interface
    controller.signals -> interface.controller_signals;
    interface.controller_world_data -> controller.world_data;
}
