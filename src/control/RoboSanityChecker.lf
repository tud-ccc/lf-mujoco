target Cpp

public preamble {=
  #ifndef ROBO_SANITY_CHECKER
  #define ROBO_SANITY_CHECKER
  #include "common_vector.hpp"
  #include "common_robo_sanity_checker_logic.hpp"
  #endif //XARM7
=}


reactor RobotSanityChecker(acceleration_cap: double = 0, sanity_check_active: bool = false, max_step_length: double = 1) {
  input rsc_holder_current_position: Position

  output current_position: Position

  state penultimate_current_position: Position  ;
  state preceding_current_position: Position  ;

  state currently_first_iteration: bool = true
  state currently_second_iteration: bool = true


  reaction(startup) {=  =}

  reaction(rsc_holder_current_position) -> current_position {=
    Position current_position_in = *rsc_holder_current_position.get();
    Position current_position_out;

    if (this->currently_first_iteration){ 
      this->penultimate_current_position = current_position_in;
      this->preceding_current_position = current_position_in;
      this->currently_first_iteration = false;
    }
    else if (this->currently_second_iteration){
      this->preceding_current_position = current_position_in;
      this->currently_second_iteration = false;
    }
    if(sanity_check_active){
      RoboSanityChecker rsc_coordinates = RoboSanityChecker{acceleration_cap, max_step_length};
      Vector current_coordinates_out = rsc_coordinates.robo_sanity_check_current_position(this->penultimate_current_position.get_coordinates(),
                                                                          this->preceding_current_position.get_coordinates() , 
                                                                          current_position_in.get_coordinates());

      Vector current_roll_pitch_yaw_out = current_position_in.get_roll_pitch_yaw();
      current_position_out = Position{current_coordinates_out, current_roll_pitch_yaw_out};
      current_position.set(current_position_out);
    }
    else{
      current_position_out = current_position_in;
      current_position.set(current_position_in);
    }
    this->penultimate_current_position =  this->preceding_current_position;
    this->preceding_current_position = current_position_out;

  =}

  
}
