target Cpp

public preamble {=
  #ifndef ROBO_SANITY_CHECKER
  #define ROBO_SANITY_CHECKER
  #include "common_vector.hpp"
  #include "common_robo_sanity_checker_logic.hpp"
  #endif //XARM7
=}

reactor RobotSanityChecker(
    acceleration_cap: double = 0,
    sanity_check_active: bool = false,
    accept_robot_stop_threshold: int = 3) {
  input rsc_holder_current_position: Position

  output current_position: Position

  state penultimate_current_position: Position
  state preceding_current_position: Position

  state currently_first_iteration: bool = true
  state currently_second_iteration: bool = true

  //stopping conditions
  state stop_handling_active: bool = false
  state stop_counter: int = 0
  state robot_stop_position: Position

  reaction(startup) {=  =}

  reaction(rsc_holder_current_position) -> current_position {=
    Position current_position_in = *rsc_holder_current_position.get();
    Position current_position_out;

    if (this->currently_first_iteration){
      this->penultimate_current_position = current_position_in;
      this->preceding_current_position = current_position_in;
      this->currently_first_iteration = false;
    }
    else if (this->currently_second_iteration){
      this->preceding_current_position = current_position_in;
      this->currently_second_iteration = false;
    }
    if(sanity_check_active)
    {
      RoboSanityChecker rsc = RoboSanityChecker{acceleration_cap, true};
      if(!this->stop_handling_active){
        //check whether stop handling has to be initiated
        this->stop_handling_active = rsc.robot_pretended_to_stop(this->penultimate_current_position,
                                                                 this->preceding_current_position,                                                                  
                                                                 current_position_in);
      }
      if(this->stop_handling_active)
      {
          Position predicted_position = rsc.predict_position(this->penultimate_current_position, 
                                                               this->preceding_current_position);      

          if (this->stop_counter == 0){
            this->robot_stop_position = current_position_in;
            this->stop_counter += 1;

            current_position_out = predicted_position;
            current_position.set(current_position_out);
            return;
          }
          //we are yet to accept the stop motion
          else if (this->stop_counter > 0 
          && this->stop_counter <= accept_robot_stop_threshold){
            if(current_position_in.equals(this->robot_stop_position)){         
              this->stop_counter += 1;
              current_position_out = predicted_position;
              current_position.set(current_position_out);
              return;
              
            }
            else {         
              //reset stopping conditions
              stop_counter = 0;
              this->stop_handling_active = false;
              this->robot_stop_position = Position{};

              current_position_out = current_position_in;
              current_position.set(current_position_out);
              return;
            }
          }
          else if (this->stop_counter > accept_robot_stop_threshold){
              //we accepted the stop motion
            
              //reset stopping conditions
              stop_counter = 0;
              this->stop_handling_active = false;
              this->robot_stop_position = Position{};

              current_position_out = current_position_in;
              current_position.set(current_position_out);
              return;
          }
      } else // sanity checking active: no irregular behavior detected  
      {
        //reset stopping conditions
        stop_counter = 0;
        this->stop_handling_active = false;
        this->robot_stop_position = Position{};

        current_position_out = current_position_in;
        current_position.set(current_position_out);
        return;
      }
    } else // sanity checking not active, do nothing
    {
      current_position_out = current_position_in;
      current_position.set(current_position_in);
      return;
    }

    this->penultimate_current_position =  this->preceding_current_position;
    this->preceding_current_position = current_position_out;
    
  =}
}
