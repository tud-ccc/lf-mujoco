target Cpp;

public preamble {=

#ifndef CSVDATA_TRAFFIC
#define CSVDATA_TRAFFIC
#include "instruction_collector.hpp"
#include "common_vector.hpp"


#endif //CSVDATA
=}


reactor CSV_DataTraffic (instructions_path: std::string = "") {

  //robo facing
  input csv_last_position: Vector; 
  input csv_current_position: Vector;
  input csv_raw_instruction: Vector;
  input csv_next_position_checked: Vector;
  
  input csv_vector_collection: VectorCollectionVelocityControl

  reaction(startup){=
    Instruction_Collector ic = Instruction_Collector{}; 
    ic.write_instructions_csv_header(instructions_path);
    std::cout << instructions_path << std::endl;
  =}

  reaction(csv_last_position, csv_current_position, csv_raw_instruction, csv_next_position_checked, csv_vector_collection ) {=

        std::vector<std::string> vectors;
        auto last_position_as_std_vector = (*csv_last_position.get()).to_vector();
        auto current_position_as_std_vector  = (*csv_current_position.get()).to_vector();
        auto raw_position_as_std_vector  = (*csv_raw_instruction.get()).to_vector();
        auto next_position_checked_as_std_vector = (*csv_last_position.get()).to_vector();
        auto nlsov_as_std_vector = (*csv_last_position.get()).to_vector();
        auto nls_position_as_std_vector = (*csv_last_position.get()).to_vector();
        auto acceleration_vector_as_std_vector = (*csv_last_position.get()).to_vector();
        auto offset_vector_as_std_vector = (*csv_last_position.get()).to_vector();

        vectors.insert(vectors.end(), last_position_as_std_vector.begin(), last_position_as_std_vector.end());
        vectors.insert(vectors.end(), current_position_as_std_vector.begin(), current_position_as_std_vector.end());
        vectors.insert(vectors.end(), raw_position_as_std_vector.begin(), raw_position_as_std_vector.end());
        vectors.insert(vectors.end(), next_position_checked_as_std_vector.begin(), next_position_checked_as_std_vector.end());
        vectors.insert(vectors.end(), nlsov_as_std_vector.begin(), nlsov_as_std_vector.end());
        vectors.insert(vectors.end(), nls_position_as_std_vector.begin(), nls_position_as_std_vector.end());
        vectors.insert(vectors.end(), acceleration_vector_as_std_vector.begin(), acceleration_vector_as_std_vector.end());
        vectors.insert(vectors.end(), offset_vector_as_std_vector.begin(), offset_vector_as_std_vector.end());
        

        Instruction_Collector ins_coll  =  Instruction_Collector{
            get_elapsed_physical_time(),
            vectors
        };
        ins_coll.write_instructions_to_csv(instructions_path);


        =}  
}