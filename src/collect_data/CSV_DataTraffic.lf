target Cpp;

public preamble {=

#ifndef CSVDATA_TRAFFIC
#define CSVDATA_TRAFFIC
#include "instruction_collector.hpp"
#include "common_vector.hpp"


#endif //CSVDATA
=}


reactor CSV_DataTraffic (instructions_path: std::string = "") {

  //robo facing
  input csv_last_position: Vector; 
  input csv_current_position: Vector;
  input csv_raw_instruction: Vector;
  input csv_next_position_checked: Vector;
  
  input csv_vector_collection: VectorCollectionVelocityControl

  reaction(startup){=
    Instruction_Collector ic = Instruction_Collector{}; 
    ic.write_instructions_csv_header(instructions_path);
    std::cout << instructions_path << std::endl;
  =}

  reaction(csv_last_position, csv_current_position, csv_raw_instruction, csv_vector_collection, csv_next_position_checked) {=

        std::vector<std::string> vectors;

        vectors.insert(vectors.end(), (*csv_last_position.get()).to_vector().begin(), (*csv_last_position.get()).to_vector().end());
        // vectors.push_back(*csv_last_position.get());
        
        vectors.insert(vectors.end(), (*csv_current_position.get()).to_vector().begin(), (*csv_current_position.get()).to_vector().end());
        // vectors.push_back(*csv_current_position.get());
        
        vectors.insert(vectors.end(), (*csv_raw_instruction.get()).to_vector().begin(), (*csv_raw_instruction.get()).to_vector().end());
        // vectors.push_back(*csv_raw_instruction.get());
        
        vectors.insert(vectors.end(), (*csv_next_position_checked.get()).to_vector().begin(), (*csv_next_position_checked.get()).to_vector().end());
        // vectors.push_back(*csv_next_position_checked.get());
        
        vectors.insert(vectors.end(),  (*csv_vector_collection.get()).get_next_logical_step_offset_vector().to_vector().begin(), (*csv_vector_collection.get()).get_next_logical_step_offset_vector().to_vector().end());
        // vectors.push_back((*csv_vector_collection.get()).get_next_logical_step_offset_vector());
        
        vectors.insert(vectors.end(), (*csv_vector_collection.get()).get_next_logical_step().to_vector().begin(),  (*csv_vector_collection.get()).get_next_logical_step().to_vector().end());
        // vectors.push_back((*csv_vector_collection.get()).get_next_logical_step());
        
        vectors.insert(vectors.end(), (*csv_vector_collection.get()).get_acceleration_vector().to_vector().begin(),  (*csv_vector_collection.get()).get_acceleration_vector().to_vector().end());
        // vectors.push_back((*csv_vector_collection.get()).get_acceleration_vector());
        
        vectors.insert(vectors.end(),  (*csv_vector_collection.get()).get_offset_vector().to_vector().begin(),  (*csv_vector_collection.get()).get_offset_vector().to_vector().end());
        // vectors.push_back((*csv_vector_collection.get()).get_offset_vector());

        Instruction_Collector ins_coll  =  Instruction_Collector{
            get_elapsed_physical_time(),
            vectors
        };
        ins_coll.write_instructions_to_csv(instructions_path);


        =}  
}