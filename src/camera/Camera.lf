target Cpp;

public preamble {=
  #ifndef CAMERA_LF
  #define CAMERA_LF

  #include "common_vector.hpp"
  #include "common_coordinate_transformation.hpp"
  #include "camera_library_includes.hpp"
  #include <librealsense2/rs.hpp>
  #include <iostream>
  #include <optional>

  #endif //CAMERA_LF
=}

private preamble {=

=}

reactor Camera(start_stream: time = 1s, frame_fetch_period: time = 5ms, stream_width: int = 0, stream_height: int = 0)
 {
  timer t(start_stream, frame_fetch_period)
  input camera_current_position: Position
  output controller_interface_target: Position
  state pipe: {=rs2::pipeline=}
  state texture: {=custom_benes_texture=}
  state app:{=window=}
  
  state coords3d_target_by_camera: std::optional<Vector> 
  state current_target_position: Position 


  reaction(startup) {=
    this->app = init_camera_generate_window(this->pipe, stream_width, stream_height);
  =}

  reaction(t)  {=
    this->coords3d_target_by_camera = receive_current_target(this->pipe);
  =}
  reaction(camera_current_position)-> controller_interface_target {=
    Position position_current_position = *camera_current_position.get();

    if(this->coords3d_target_by_camera.has_value()){
      // target is set, target has to be reached out for
      TransformationArithmetics ta = TransformationArithmetics{};
      Vector target = ta.transform_coordinates_wrapper(this->coords3d_target_by_camera.value(), position_current_position); 
      this->current_target_position = Position{target, Vector{0, 100 , 0 }};
      controller_interface_target.set(this->current_target_position);
    }
    else {
      //target is not set, target is the current position
      controller_interface_target.set(position_current_position);
    }
    =}
}
