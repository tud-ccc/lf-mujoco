target Cpp;

public preamble {=
  #ifndef CAMERA_LF
  #define CAMERA_LF

  #include "common_vector.hpp"
  //#include "camera_library_includes.hpp"
  #include <iostream>
  #include <optional>

  #include <opencv2/opencv.hpp>
  #include <opencv2/imgcodecs.hpp>    
  #include <opencv2/core.hpp>
  #include <opencv2/videoio.hpp>
  #include <opencv2/highgui.hpp>
  #include <opencv2/imgproc.hpp>  // cv::Canny()
  #endif //CAMERA_LF
=}

private preamble {=

=}

reactor Camera(counter_no_target:int = 8, start_stream: time = 1s, frame_fetch_period: time = 5ms, stream_width: int = 0, stream_height: int = 0)
 {
  timer t(start_stream, frame_fetch_period)
  //input camera_current_position: Position
  output offset_target: Position
  output controller_interface_target: Position

  state current_target: Position 
  state counter: int = 0 

  state cam: cv::VideoCapture = 0;
  state pic: cv::Mat;


  reaction(startup) {=
    //this->app = init_camera_generate_window(this->pipe, stream_width, stream_height);
  =}

  method take_picture(): cv::Mat {=
    while (!cam.isOpened()) {
        std::cout << "Failed to make connection to cam" << std::endl;
        cam.open(0);
    }
    cam>>pic;
    return pic;
  =}

  reaction(t)  {=
    auto pic = take_picture();
    std::cout << "took picture" << std::endl;
  =}
}
