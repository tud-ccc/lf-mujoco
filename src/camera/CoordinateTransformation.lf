target Cpp;

public preamble {=

#ifndef CAMERA_COORD_TRAFO
#define CAMERA_COORD_TRAFO
#include "common_vector.hpp"
#include "camera_library_includes.hpp"
#include <optional>



#endif //CAMERA_COORD_TRAFO
=}


reactor CoordinateTransformation {

  input current_position: Position

  input coordinates_by_camera: std::optional<Vector>;
  output coordinates_target_system: std::optional<Vector>;  

  state coords3d_target_by_camera: std::optional<Vector> 

  reaction(coordinates_by_camera){=
    this->coords3d_target_by_camera = *coordinates_by_camera.get();
  =}


  reaction(current_position) -> coordinates_target_system{=

      if(this->coords3d_target_by_camera.has_value()){
      Position cur_pos = *current_position.get();
      CoordinateTransformations ta = CoordinateTransformations{};
      Vector target = ta.transform_coordinates_wrapper(this->coords3d_target_by_camera.value(), cur_pos); 
      coordinates_target_system.set(target);
      }
      else {
      coordinates_target_system.set(this->coords3d_target_by_camera);
      }
=}


}