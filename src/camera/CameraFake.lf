target Cpp;

public preamble {=
  #ifndef CAMERA_FAKE
  #define CAMERA_FAKE
  #include "common_vector.hpp"
  #include <iostream>

  #endif //CAMERA_FAKE
=}

private preamble {=

=}

reactor CameraFake(start_changing_target: time = 1s, changing_target_period = 2s, stay_at_first_position:bool = true ,positions:
               {= Position[4] =} = {=
            {
              Position{Vector{0, 0, 0 },Vector{0, 0, 0 }},Position{ Vector{0, 0, 0 },Vector{0, 0, 0 }}, Position{Vector{0, 0, 0},Vector{0, 0, 0 }}, Position{Vector{0, 0, 0},Vector{0, 0, 0 }}
            }
               =})
 {
  timer t(start_changing_target, changing_target_period)
  output controller_interface_target: Position

  state counter: int = 0 
  state last_target: Position

  reaction(startup) {=
    last_target = positions[counter];
  =}

  reaction(t) -> controller_interface_target {=

    if(!stay_at_first_position){
      this->last_target = positions[counter];
    }
    controller_interface_target.set(this->last_target);

    this->counter = (counter + 1) % 4;

  =}
}
