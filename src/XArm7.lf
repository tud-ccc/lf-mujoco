target Cpp{
    cmake-include: "xarm.cmake",
};

import SanityChecker from "interface/SanityChecker.lf";
import WorldDataDecoder from "interface/WorldDataDecoder.lf";
import XArmInterface from "interface/XArmInterface.lf";
import RoboXArm7 from "hardware/RoboXArm7.lf";
import CSV_Instructions from "collect_data/CSV_Instructions.lf";
import CSV_WorldData from "collect_data/CSV_WorldData.lf";




public preamble {=

#ifndef XARM7
#define XARM7
#include "common_vector.hpp"

#endif //XARM7
=}


reactor RobotControl (stride: double  = 0.5, hypotenuse: double = 75){

  private preamble{= 
    #include <cmath>

    double calculate_x_value(double hypothenus, double angle_in_deg){
        double x_val = 0.0;
        x_val = hypothenus * cos(angle_in_deg*3.14159/180.0);
        return x_val;
        
    }

    double calculate_y_value(double hypothenus, double angle_in_deg){
        double y_val = 0.0;
        y_val = hypothenus * sin(angle_in_deg*3.14159/180.0);
        return y_val;   }
    
    =}

   
state deg: double = 0;
input current_position: Vector;        
output raw_instruction: Vector;


reaction(startup) {=

=}

reaction(current_position) -> raw_instruction{=  
  // This vector is not used here !
  Vector vec_current_position = *current_position.get();
  
  double _x_val = calculate_x_value(hypotenuse, deg ) + 400.0;
  double _y_val = calculate_y_value(hypotenuse, deg ) + 0.0;
        
  Vector vec_raw_instruction = Vector{_x_val, _y_val, 200}; 
  
  raw_instruction.set(vec_raw_instruction); 

  deg = deg + stride;
  if (deg >= 360.0 ) { deg = deg - 360.0;}
  =}
  




}



main reactor XArm7{

    controller = new RobotControl();
    decoder = new WorldDataDecoder();
    sanity_checker = new SanityChecker();
    interface = new XArmInterface();
    hardware = new RoboXArm7();
    data_collector_instructions = new CSV_Instructions();
    data_collector_world_data = new CSV_WorldData();



    controller.raw_instruction -> sanity_checker.raw_instruction;
    sanity_checker.checked_instruction -> interface.checked_instruction;

    interface.robo_checked_instruction -> hardware.robo_checked_instruction;
    hardware.interface_world_data -> interface.interface_world_data;

    interface.decoder_world_data -> decoder.decoder_world_data;    
    decoder.current_position -> controller.current_position;
    decoder.current_position -> sanity_checker.current_position;

    //CSV DATA
    controller.raw_instruction ->data_collector_instructions.raw_instruction;
    sanity_checker.checked_instruction -> data_collector_instructions.checked_instruction; 
    decoder.current_position ->  data_collector_instructions.current_position;

    interface.decoder_world_data -> data_collector_world_data.current_world_data;

}