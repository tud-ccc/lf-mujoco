target Cpp {
  cmake-include: "xarm.cmake",
}

import RobotControl from "control/XArm7Controller.lf"
import Planner from "control/Planner.lf"
import WorldDataDecoder from "interface/WorldDataDecoder.lf"
import XArmInterface from "interface/XArmInterface.lf"
import CSV_DataTraffic from "collect_data/CSV_DataTraffic.lf"
import CSV_WorldData from "collect_data/CSV_WorldData.lf"
import RoboXArm7Fake from "hardware/RoboXArm7Fake.lf"
import RoboXArm7 from "hardware/RoboXArm7.lf"
import RoboXArm7Sim from "hardware/RoboXArm7Sim.lf"
import LastPositionHolder from "control/LastPositionHolder.lf"
import SanityChecker from "control/SanityChecker.lf"
import RobotSanityChecker from "control/RoboSanityChecker.lf"
import CameraInterface from "camera/CameraInterface.lf"
import CameraFake from "camera/CameraFake.lf"
import Camera from "camera/Camera.lf"
import InitStartPosition from "camera/InitStartPosition.lf"




public preamble {=
  #ifndef START_UP
  #define START_UP
  #include "common_vector.hpp"

  #endif //XARM7
=}

private preamble {=  =}

main reactor StartUp {
  // CAMERA
  camera_fake = new CameraFake (start_changing_target = 1s, 
                               changing_target_period = 4s, 
                               stay_at_first_position = false,
                               positions = {=
    {
      Position{Vector{400, -200, 175 },Vector{0, 100 , 0 }},
      Position{ Vector{525, 0, 175 },Vector{0, 100, 0 }}, 
      Position{Vector{400, 200, 175},Vector{0, 100, 0 }}, 
      Position{Vector{275, 0, 175},Vector{0, 100 , 0 }}
    }
  =})
  camera = new Camera(start_stream = 1s, frame_fetch_period = 2s)

  camera_interface = new CameraInterface()
  camera_init = new InitStartPosition(init_counter = 100)

  // INTERFACE
  decoder = new WorldDataDecoder()
  interface = new XArmInterface()
  
  // HARDWARE : FAKE ROBO <--> Interface
  // CONTROL
  planner = new Planner(max_step_length = 1.2,
                      threshold_deaccelerate = 20, 
                      threshold_near_target_stop_moving = 0.001, 
                      acceleration_cap = 0.2,
                      roll_pitch_yaw_max_angle = 0.3,
                      roll_pitch_yaw_threshold_stop_moving = 0.01)
  last_position_holder = new LastPositionHolder()
  controller = new RobotControl()

  // SANITY CHECKS
  sanity_checker = new SanityChecker(max_step_length = 1.2, acceleration_cap = 0.3)

  robo_sanity_checker = new RobotSanityChecker (acceleration_cap = 0.3, 
                                      sanity_check_active = true)


  // DATA
  data_collector_traffic = new CSV_DataTraffic(
      instructions_path="data_analysis/data/instructions.csv")
  data_collector_world_data = new CSV_WorldData(data_path="data_analysis/data/data.csv")

  // HARDWARE : REAL ROBO <--> Interface
  hardware = new RoboXArm7(timer_start_moving = 1s, timer_initiate_movin_period = 15ms);
  interface.robo_next_position_checked -> hardware.robo_next_position_checked;
  hardware.interface_world_data -> interface.interface_world_data;
  
  // HARDWARE : FAKE ROBO <--> Interface
  // fake_hardware = new RoboXArm7Fake(initial_current_position = {= Vector{400, -75,0} =})
  // interface.robo_next_position_checked -> fake_hardware.robo_next_position_checked
  // fake_hardware.interface_world_data -> interface.interface_world_data


  // Camera --> Interface --> Init --> Controller
  camera_fake.controller_interface_target -> camera_interface.interface_target
  // camera.controller_interface_target -> camera_interface.interface_target
  camera_interface.init_target -> camera_init.init_current_target  
  camera_init.controller_target -> controller.robot_control_target 

  // Controller --> Planner  
  controller.target_unchecked -> planner.planner_raw_instruction

  // Planner --> Sanity Checker
  planner.sanity_checker_next_position -> sanity_checker.sanity_checker_next_position

  // Sanity Checker --> Interface
  sanity_checker.next_position_checked -> interface.interface_next_position_checked

  // Interface --> Decoder
  interface.world_data -> decoder.decoder_world_data

  // Decoder --> Robo sanity checker
  decoder.current_position -> robo_sanity_checker.rsc_holder_current_position

  // Robo sanity checker --> Last Position Holder | Controller | Velocity Control | Sanity Checker
  robo_sanity_checker.current_position -> last_position_holder.holder_current_position
  robo_sanity_checker.current_position -> controller.robot_control_current_position
  robo_sanity_checker.current_position -> planner.planner_current_position
  robo_sanity_checker.current_position -> sanity_checker.sanity_checker_current_position
  robo_sanity_checker.current_position -> camera.camera_current_position
  robo_sanity_checker.current_position -> camera_init.current_position


  // Last Position Holder  --> Planner
  last_position_holder.planner_last_position -> planner.planner_last_position
  last_position_holder.planner_last_position -> sanity_checker.sanity_checker_last_position

  // CSV DATA : Instructions
  planner.data_collector_velocity_control_vector_collection -> data_collector_traffic.csv_vector_collection
  decoder.current_position -> data_collector_traffic.csv_current_position
  last_position_holder.planner_last_position -> data_collector_traffic.csv_last_position
  controller.target_unchecked -> data_collector_traffic.csv_raw_instruction
  sanity_checker.next_position_checked -> data_collector_traffic.csv_next_position_checked

  // CSV DATA : World data
  interface.world_data -> data_collector_world_data.csv_world_data
}
  
