target Cpp {
    cmake-include: "xarm.cmake"
  }
  import RobotControl from "control/XArm7Controller.lf"
  import Planner from "control/Planner.lf"
  import WorldDataDecoder from "interface/WorldDataDecoder.lf"
  import XArmInterface from "interface/XArmInterface.lf"
  import CSV_Instructions from "collect_data/CSV_Instructions.lf"
  import CSV_WorldData from "collect_data/CSV_WorldData.lf"
  import RoboXArm7Fake from "hardware/RoboXArm7Fake.lf"
  import RoboXArm7 from "hardware/RoboXArm7.lf"
  import LastPositionHolder from "control/LastPositionHolder.lf"
  import VelocityControl from "control/VelocityControl.lf"

  public preamble {=
    #ifndef XARM7
    #define XARM7
    #include "common_vector.hpp"
  
    #endif //XARM7
  =}
  
  private preamble {=

  =}
  
 
  main reactor StartUp {
    //INTERFACE
    decoder = new WorldDataDecoder()
    interface = new XArmInterface()

    //CONTROL
    planner = new Planner(position_evaluator_acceleration_cap = 0.1, position_evaluator_max_step_length = 1)
    controller = new RobotControl(positions = {={Vector{400, -75, 0 }, Vector{475, 0, 0 }, Vector{400, 75, 0}, Vector{325, 0, 0}}=} )
    last_position_holder = new LastPositionHolder(initial_last_position = {=Vector{400, -75,0}=})
    velocity_control = new VelocityControl()

    //DATA  
    data_collector_instructions = new CSV_Instructions(instructions_path = "data_analysis/data/instructions.csv")
    data_collector_world_data = new CSV_WorldData(data_path = "data_analysis/data/data.csv")  
  
    // HARDWARE : REAL ROBO
    // hardware = new RoboXArm7();
    // interface.robo_next_position_checked -> hardware.robo_next_position_checked;
    // hardware.interface_world_data -> interface.interface_world_data;
    
    // HARDWARE : FAKE ROBO <--> Interface
    fake_hardware = new RoboXArm7Fake(initial_current_position = {=Vector{400, -75,0}=})
    interface.robo_next_position_checked -> fake_hardware.robo_next_position_checked
    fake_hardware.interface_world_data -> interface.interface_world_data

    // Controller --> Planner
    controller.raw_instruction -> planner.planner_raw_instruction

    //Planner --> Velocity Control
    planner.velocity_control_next_position -> velocity_control.velocity_control_next_position

    //Velocity Control --> Interface
    velocity_control.next_position_checked -> interface.interface_next_position_checked
  
    // Interface --> Decoder
    interface.world_data -> decoder.decoder_world_data

    // Decoder --> Last Position Holder | Controller
    decoder.current_position -> last_position_holder.holder_current_position
    decoder.current_position -> controller.robot_control_current_position

    // Last Position Holder  --> Planner
    last_position_holder.planner_current_position-> planner.planner_current_position
    last_position_holder.planner_last_position -> planner.planner_last_position

    // CSV DATA : Instructions
    controller.raw_instruction -> data_collector_instructions.csv_raw_instruction  
    velocity_control.next_position_checked -> data_collector_instructions.csv_next_position_checked
    decoder.current_position -> data_collector_instructions.csv_current_position

    // CSV DATA : World data
    interface.world_data -> data_collector_world_data.csv_world_data
  }
  