target Cpp{
    //cmake-include: "mujoco.cmake",
};

public preamble {=
#include <mujoco/mujoco.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <string>
#include <array>
#include <thread>

// structs that handle user input
struct KeyboardInput {
    GLFWwindow* window;
    int key;
    int scancode;
    int act;
    int mods;
};

struct MouseButtonInput {
    GLFWwindow* window;
    int button;
    int act;
    int mods;
};

struct MouseMoveInput {
    GLFWwindow* window;
    double xpos;
    double ypos;
};

struct ScrollInput {
    GLFWwindow* window;
    double xoffset;
    double yoffset;
};

=}

reactor MujocoSimulator(
    file: std::string = "", 
    visualize: bool = true,
    collect_data: bool = false
    ) {
    // simulator thread and pointer to glfw window other things are sadly globally defined
    state thread: std::thread;
    state error: char[1000];
    state window: GLFWwindow*;
    state terminate: bool = false;
    
    // communicating controll inputs from controller to simulator thread
    state last_controll_input: std::vector<double>;
    state last_controll_input_lock: std::mutex;
    
    // communcation with the interface
    output simulator_world_data: mjData*;
    input controll_signals: {=std::vector<double>=}
    
    // the simulator thread pushes data into this physical action
    physical action world_data: mjData*;

    reaction initialize(startup) -> world_data;
    reaction deconstruct(shutdown);
    reaction forward_world_data(world_data) -> simulator_world_data;
    reaction handle_controll_signals(controll_signals);
}
