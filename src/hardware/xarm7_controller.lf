target Cpp;

public preamble {=
#include <iostream>
#include <string>
#include <array>
#include <thread>
#include <fstream>
#include <xarm/wrapper/xarm_api.h>

#include "world.hpp"
#include <chrono>

=}

reactor XArm7Controll(host: std::string = "192.168.1.227") {
    timer fetch_data(100ms, 100ms);

    state arm: {=XArmAPI*=};

    // communcation with the interface
    output world_data: WorldData;
    input controll_signals: {=std::vector<double>=}

    reaction(startup) -> world_data {=
    
    this->arm = new XArmAPI(host);

    if (this->arm == nullptr) {
          std::cerr << "Couldn't connect to Robot! on: " << host << std::endl << std::flush;
            
        }
    else{
        if (arm->error_code != 0){
            arm->clean_error();
        }
        if (arm->warn_code != 0) {arm->clean_warn();}
        arm->motion_enable(true);
        arm->set_mode(0);
        arm->set_state(0);
        std::cout << "! ================== !" << std::endl;
        std::cout << "! Waiting some seconds !" << std::endl;
        //sleep_milliseconds(3000);
        std::cout << "! Waited now for 3 seconds, resetting !" << std::endl;
        arm->reset(true);

        fp32 pos[6] = { 400, 0, 200, 180, 0, 0};
        int ret = arm->set_position(pos, 0, false);

    std::cout << "! We passed the startup-function  !" << std::endl;
    }

    =}



    reaction(fetch_data) -> world_data {=
        int error_code;

        fp32 pose[6] = {0};
        fp32 angles[7] = {0};
        fp32 velocities[7] = {0};
        fp32 effort[7] = {0};

        error_code = arm->get_position(pose);

        if (error_code != 0) {
            std::cout << "Error occured while calling get_position, no connection established" << std::endl;            
        }
        error_code = arm->get_joint_states(angles, velocities, effort);  
        if (error_code != 0) {
            std::cout << "Error occured while calling get_joint_states, no connection established" << std::endl;
        }
        
        WorldData data{
            get_elapsed_physical_time(),
            std::vector<double>(std::begin(angles), std::end(angles)), 
            std::vector<double>(std::begin(velocities), std::end(velocities)),
            std::vector<double>(std::begin(effort), std::end(effort)),
            std::vector<double>(std::begin(pose), std::end(pose)),
        };


        
        world_data.set(data);
    =}


    reaction(controll_signals) {=
        auto data = *controll_signals.get();
        fp32 pos[6];
        
        // the very save way
        for (auto i = 0; i < 6; i++) {
            pos[i] = data[i];
        //    std::cout << "Actual value beeing in data[i]" << data[i] << std::endl ;
        }

        int error_code = arm->set_position(pos, 0, false);
        if (error_code != 0) {
            std::cout << "Error occured while calling set_position, no connection established" << std::endl;
        }
        
        
        

    =}

    reaction(shutdown) {=

    =}
}