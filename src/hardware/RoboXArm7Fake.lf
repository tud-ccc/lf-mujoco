target Cpp

public preamble {=
  #ifndef ROBOXARMFAKE
  #define ROBOXARMFAKE
  #include "common_vector.hpp"
  #include "world_data_collector.hpp"
  #include <iostream>


  #endif //ROBOXARMFAKE
=}

reactor RoboXArm7Fake(initial_position: {=Vector=} = {=Vector{400, -75,0}=}) {
  input robo_next_position_checked: Vector;  // robo facing
  output interface_world_data: WorldData;
  timer t(200 ms, 8 ms);
  state current_position: Vector = initial_position;

  reaction(startup) {=
    std::cout << "Robo X Arm Fake start up" << std::endl;
  =}

  reaction(t) -> interface_world_data {=

        float pose[6] = {0};
        float angles[7] = {0};
        float velocities[7] = {0};
        float effort[7] = {0};

        pose[0] = current_position.X_;
        pose[1] = current_position.Y_;
        pose[2] = current_position.Z_;

        WorldData data{
            get_elapsed_physical_time(),
            std::vector<double>(std::begin(angles), std::end(angles)),
            std::vector<double>(std::begin(velocities), std::end(velocities)),
            std::vector<double>(std::begin(effort), std::end(effort)),
            std::vector<double>(std::begin(pose), std::end(pose)),
        };
        interface_world_data.set(data);
    
  =}

  reaction(robo_next_position_checked) {=
    Vector vec_next_position_checked = *robo_next_position_checked.get();
    current_position = vec_next_position_checked;
  =}
}
