target Cpp;

public preamble {=

#ifndef ROBOXARM
#define ROBOXARM
#include "common_vector.hpp"
#include "world_data_collector.hpp"
#include <xarm/wrapper/xarm_api.h>


#endif //ROBOXARM
=}


reactor RoboXArm7 (timer_start_moving: time = 1s, timer_initiate_movin_period: time = 10ms, host: std::string = "192.168.1.227"){


  //robo facing
  input robo_next_position_checked: Position;
  output interface_world_data: WorldData;
  timer t(timer_start_moving, timer_initiate_movin_period);
  state arm: {=XArmAPI*=};

  reaction(startup) {=
  
    
    this->arm = new XArmAPI(host);

    if (this->arm == nullptr) {
          std::cerr << "Couldn't connect to Robot! on: " << host << std::endl << std::flush;
            
        }
    else{
        if (arm->error_code != 0){
            arm->clean_error();
        }
        if (arm->warn_code != 0) {arm->clean_warn();}
        arm->motion_enable(true);

        arm->set_mode(1);
        arm->set_state(0);


        // int ret;

        // ret = arm->set_reduced_max_tcp_speed(500);
        // printf("set_reduced_max_tcp_speed, ret=%d\n", ret);

        // ret = arm->set_reduced_max_joint_speed(100);
        // printf("set_reduced_max_tcp_speed, ret=%d\n", ret);
        // ret = arm->set_reduced_mode(true);
        // printf("set_reduced_mode, ret=%d\n", ret);

        // arm->set_mode(0);



    }

    =}
  

  reaction(t) -> interface_world_data{=

        int error_code;

        fp32 pose[6] = {0};
        fp32 angles[7] = {0};
        fp32 velocities[7] = {0};
        fp32 effort[7] = {0};

        error_code = arm->get_position(pose);
        if (error_code != 0) {
            std::cout << "Error occured while calling get_position, no connection established" << std::endl;            
        }

        error_code = arm->get_joint_states(angles, velocities, effort);  
        if (error_code != 0) {
            std::cout << "Error occured while calling get_joint_states, no connection established" << std::endl;
        }
        
        WorldData data{
            get_elapsed_physical_time(),
            std::vector<double>(std::begin(angles), std::end(angles)), 
            std::vector<double>(std::begin(velocities), std::end(velocities)),
            std::vector<double>(std::begin(effort), std::end(effort)),
            std::vector<double>(std::begin(pose), std::end(pose)),
        };        
        interface_world_data.set(data);
=}
  



  reaction(robo_next_position_checked) {=
        Vector coordinates = (*robo_next_position_checked.get()).get_coordinates();
        Vector roll_pitch_yaw = (*robo_next_position_checked.get()).get_roll_pitch_yaw();
          
        fp32 pos[6] = {coordinates.X_, coordinates.Y_, coordinates.Z_, roll_pitch_yaw.X_, roll_pitch_yaw.Y_, roll_pitch_yaw.Z_};
        // arm->set_mode(1);
        int error_code = arm->set_servo_cartesian(pos);
        // int error_code = arm->set_position(pos, 0, false);

        if (error_code != 0) {
            std::cout << "Error occured while calling set_position, no connection established" << std::endl;
        }

  =}  

  


}